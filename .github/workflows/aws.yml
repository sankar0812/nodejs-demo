name: Deploy to Amazon EC2

on:
  push:
    branches: [ "master" ]

env:
  AWS_REGION: ap-south-1                 
  ECR_REPOSITORY: github-action
  CONTAINER_NAME: git-action-container
  EC2_INSTANCE_IP: 13.232.145.122
  ECR_REGISTRY: 273521728595.dkr.ecr.ap-south-1.amazonaws.com

permissions:
  contents: read

jobs:
  deploy:
    runs-on: self-hosted 
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}          
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Pull the Docker image from Amazon ECR
      run: |
        docker pull "${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG

    - name: deploy the Docker container EC2
      run: |
          # Stop and remove the existing container if it exists
          docker stop ${{ env.CONTAINER_NAME }} || true
          docker rm ${{ env.CONTAINER_NAME }} || true

          # Run the new Docker container
          docker run -d --name ${{ env.CONTAINER_NAME }} -p 3000:3000 "${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG"

