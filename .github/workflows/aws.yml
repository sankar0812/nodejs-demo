name: Deploy to Amazon EC2

on:
  push:
    branches: [ "master" ]

env:
  AWS_REGION: ap-south-1                 
  ECR_REPOSITORY: github-action
  CONTAINER_NAME: git-action-container
  EC2_INSTANCE_IP: 13.232.145.122

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}          
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: SSH into EC2 and pull the Docker image
      uses: appleboy/ssh-action@master
      with:
        host: ${{ env.EC2_INSTANCE_IP }}
        username: ${{ secrets.EC2_SSH_USERNAME }}
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        script: |
          docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: SSH into EC2 and deploy the Docker container
      uses: appleboy/ssh-action@master
      with:
        host: ${{ env.EC2_INSTANCE_IP }}
        username: ${{ secrets.EC2_SSH_USERNAME }}
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        script: |
          docker stop $CONTAINER_NAME || true
          docker rm $CONTAINER_NAME || true
          docker run -d --name $CONTAINER_NAME -p 80:80 $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

		



    
