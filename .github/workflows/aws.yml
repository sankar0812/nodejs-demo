name: Deploy to Amazon EC2

on:
  push:
    branches: [ "master" ]

env:
  AWS_REGION: ap-south-1                 
  ECR_REPOSITORY: github-action
  CONTAINER_NAME: git-action-container
  ECR_REGISTRY: 273521728595.dkr.ecr.ap-south-1.amazonaws.com
  IMAGE_TAG: ${{ github.sha }}
  MAX_IMAGES_TO_KEEP: 3

jobs:
  deploy:
    runs-on: self-hosted 
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}          
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Delete old ECR images
      run: |
        # Fetch the image list from the ECR repository
        IMAGE_LIST=$(aws ecr list-images --region ${{ env.AWS_REGION }} --repository-name ${{ env.ECR_REPOSITORY }} --query 'imageIds[*].[imageDigest,imagePushedAt]' --output json | jq -r 'sort_by(.[1])[:-${{ env.MAX_IMAGES_TO_KEEP }}] | .[] | .[0]')

        # Loop through the list of old images and delete them to
        for IMAGE_ID in $IMAGE_LIST; do
          aws ecr batch-delete-image --region ${{ env.AWS_REGION }} --repository-name ${{ env.ECR_REPOSITORY }} --image-ids imageDigest=$IMAGE_ID
        done

    - name: Delete old Docker Container and Docker images
      run: |
        # Stop and remove the existing container if it exists
        docker stop ${{ env.CONTAINER_NAME }} || true
        docker rm ${{ env.CONTAINER_NAME }} || true
        # remove the old images
        docker image prune -af || true

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      run: |
        # Build a docker container and
        # push it to ECR
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_TAG }} .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_TAG }}
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT

    - name: Pull the Docker image from Amazon ECR
      run: |
        docker pull "${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"

    - name: Deploy the Docker container on EC2
      run: |
          # Run the new Docker container
          docker run -d --name ${{ env.CONTAINER_NAME }} -p 3000:3000 "${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"
